{"version":3,"sources":["components/Navbar/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","message","score","topScore","Card","type","alt","name","src","image","onClick","clickPicture","id","footStyle","background-color","color","height","bottom","App","state","avengersList","clickedAvengerIds","handleClickPicture","shuffledArray","_this","handleShuffleArray","setState","includes","console","log","concat","i","length","j","Math","floor","random","_ref","_this2","this","components_Navbar","map","avenger","Cards","key","style","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2+BAgBgBA,MAbhB,SAAgBC,GACZ,OACGC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,eAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBJ,EAAMK,QAAzC,KACAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,UAAqDJ,EAAMM,MAA3D,iBAAgFN,EAAMO,mBCCnFC,MARf,SAAcR,GACV,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCAAoCK,KAAK,SACxDC,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,MAAQC,QAAS,kBAAMd,EAAMe,aAAaf,EAAMgB,eCF9EC,EAAY,CAChBC,mBAAmB,UACnBC,MAAO,cACPC,OAAQ,OACRC,OAAQ,KA2GKC,6MAtGbC,MAAQ,CAENC,eACAC,kBAAmB,GACnBnB,MAAO,EACPC,SAAU,EACVF,QAAS,8BAIXqB,mBAAqB,SAAAV,GAEnB,IAAIW,EAAgBC,EAAKC,mBAAmBL,GAI5C,GAHAI,EAAKE,SAAS,CAAEN,aAAcG,IAG1BC,EAAKL,MAAME,kBAAkBM,SAASf,GAIxC,OAFAgB,QAAQC,IAAI,gCACZL,EAAKE,SAAS,CAAEL,kBAAmB,GAAInB,MAAO,EAAID,QAAQ,8BAK1DuB,EAAKE,SAAS,CAEZL,kBAAmBG,EAAKL,MAAME,kBAAkBS,OAAO,CAAClB,IAExDV,MAAOsB,EAAKL,MAAMjB,MAAQ,EAG1BD,QAAS,6BAEX2B,QAAQC,IAAI,QAASL,EAAKL,MAAMjB,OAChC0B,QAAQC,IAAI,WAAYL,EAAKL,MAAMhB,UAG/BqB,EAAKL,MAAMjB,MAAQ,IAAM,IAE3BsB,EAAKC,mBAAmBL,GACxBI,EAAKE,SAAS,CAAEN,aAAcG,IAG9BC,EAAKE,SAAS,CACZvB,SAAUqB,EAAKL,MAAMjB,MAAQ,EAC7BD,QAAS,0DAETC,MAAO,EACPmB,kBAAmB,MAMdG,EAAKL,MAAMjB,MAAQ,EAAIsB,EAAKL,MAAMhB,UACzCqB,EAAKE,SAAS,CAAEvB,SAAUqB,EAAKL,MAAMjB,MAAQ,OAMnDuB,mBAAqB,SAAAL,GACnB,IAAK,IAAIW,EAAIX,EAAaY,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAChD,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADQM,EAEX,CAACjB,EAAaa,GAAIb,EAAaW,IAAnEX,EAAaW,GAFkCM,EAAA,GAE9BjB,EAAaa,GAFiBI,EAAA,GAIlD,OAAOjB,2EAIA,IAAAkB,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CACEtC,MAAOqC,KAAKpB,MAAMjB,MAClBC,SAAUoC,KAAKpB,MAAMhB,SACrBF,QAASsC,KAAKpB,MAAMlB,UAEtBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,0CAECuC,KAAKpB,MAAMC,aAAaqB,IAAI,SAAAC,GAAO,OAClC7C,EAAAC,EAAAC,cAAC4C,EAAD,CACE/B,GAAI8B,EAAQ9B,GACZgC,IAAKF,EAAQ9B,GACbL,KAAMmC,EAAQnC,KACdE,MAAOiC,EAAQjC,MAEfE,aAAc2B,EAAKhB,wBAIzBzB,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOhC,GACbhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAChBH,EAAAC,EAAAC,cAAA,KAAG+C,KAAK,+CAA+C9C,UAAU,aAAa+C,OAAO,SAASC,IAAI,uBAAlG,sCAhGMC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94243dc4.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Navbar(props) {\n    return (\n       <div>\n          <nav className=\"navbar sticky-top navbar-dark\">\n            <h2 className=\"title col-4 text-center\">Memory Game</h2>\n            {/* <h4 className=\"col-4 text-center\">Click an image to begin! </h4> */}\n            <h4 className=\"col-4 text-center\">{props.message} </h4>\n            <h2 className=\"text-light col-4 text-center\">Score: {props.score} | Top Score: {props.topScore}</h2>\n          </nav>\n       </div>\n    );\n }\n \n export default Navbar;","import React from \"react\";\nimport './style.css';\n\nfunction Card(props) {\n    return (\n\n        <img className=\"rounded-circle m-3 hover11 column\" type=\"button\" \n        alt={props.name} src={props.image}  onClick={() => props.clickPicture(props.id)}/>\n    );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/Navbar\";\nimport MemoryCard from \"./components/Cards\";\nimport avengersList from \"./avengersList.json\";\n\nconst footStyle = {\n  \"background-color\":\"#4B0082\",\n  color: \"whitesmoke \", \n  height: \"60px\", \n  bottom: \"0\"\n};\n\nclass App extends Component {\n\n  state = {\n    // Setting this.state.avengersList to the avengers json array\n    avengersList,\n    clickedAvengerIds: [],\n    score: 0,\n    topScore: 0, \n    message: \"Click an image to begin!\"\n  }\n\n  //Main logic for the GAME score & reshuffling pictures \n  handleClickPicture = id => {\n    // Arrange the pictures in a random manner\n    let shuffledArray = this.handleShuffleArray(avengersList);\n    this.setState({ avengersList: shuffledArray });\n\n    //Check if the image is clicked twice \n    if (this.state.clickedAvengerIds.includes(id)){\n      // this.state.message = 'You guessed incorrectly! '; \n      console.log('Game Over reset values ')\n      this.setState({ clickedAvengerIds: [], score: 0 , message:'You guessed incorrectly! '}); \n      return;\n\n    }else { \n      //Update the state with updated values \n      this.setState({\n        //Add clicked picture to the array \n        clickedAvengerIds: this.state.clickedAvengerIds.concat([id]),\n        //Increment Score \n        score: this.state.score + 1,\n        // topScore: this.state.score + 1,\n        //Display Message \n        message: 'You guessed it correctly'\n      });\n      console.log(\"Score\", this.state.score);\n      console.log(\"TopScore\", this.state.topScore);\n      \n      //scorer is 12 you win th game \n      if (this.state.score + 1 === 12) {\n        // Shuffle Array.\n        this.handleShuffleArray(avengersList);\n        this.setState({ avengersList: shuffledArray });\n        \n        //Reset th Game & values \n        this.setState({\n          topScore: this.state.score + 1, \n          message: 'Congratulations!! You won click image to reset the game',\n          //Reset the Game \n          score: 0,\n          clickedAvengerIds: [],\n          // message: \"Click an image to begin!\"\n        })\n\n      }\n      // set topscore = score if score>topscore.\n      else if (this.state.score + 1 > this.state.topScore) {\n        this.setState({ topScore: this.state.score + 1});\n      }\n\n    }\n  }\n  //Function to shuffle opictures when clicked \n  handleShuffleArray = avengersList => {\n    for (let i = avengersList.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [avengersList[i], avengersList[j]] = [avengersList[j], avengersList[i]]; // swap elements\n    }\n    return avengersList;\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <NavBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message} />\n\n        <div className=\"container-fluid p-2 col-9 justify-content-center\">\n          <h3 className=\"text-center text-danger\">Try not to click the same image twice!</h3>\n          {/* Loop through all the items in the static list  */}\n          {this.state.avengersList.map(avenger => (\n            <MemoryCard\n              id={avenger.id}\n              key={avenger.id}\n              name={avenger.name}\n              image={avenger.image}\n              // onclick call the handle event to calculate score & shuffle array \n              clickPicture={this.handleClickPicture}\n            />\n          ))}\n        </div>\n        <footer style={footStyle}>\n          <center className=\"p-3\">\n            <a href=\"https://github.com/NVK2016/React-Clicky-Game\" className=\"text-light\" target=\"_blank\" rel=\"noopener noreferrer\" >Click here for the code </a>\n          </center>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}